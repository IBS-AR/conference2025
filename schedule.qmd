---
title: Schedule (draft)
knitr: true
format:
  html:
    page-layout: custom
include-in-header: 
  text: |
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.css" rel="stylesheet">
---


```{css, echo = FALSE}
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    <!-- font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; -->
    background-color: #f8fafc;
    padding: 20px;
    line-height: 1.4;
}

.scroll-wrapper {
  width: 100%;
  overflow-x: auto;
}

.container {
    min-width: 1000px;
    max-width: 2000px;
    margin: 0 auto;
}

h1 {
    color: #1f2937;
    margin-bottom: 30px;
    font-size: 28px;
    font-weight: 700;
}

.timeline-container {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
    overflow: hidden;
}

.header {
    display: grid;
    grid-template-columns: 40px repeat(5, 1fr);
    border-bottom: 2px solid #e5e7eb;
    background: #f9fafb;
}

.header-cell {
    padding: 15px 10px;
    font-weight: 600;
    text-align: center;
    border-right: 1px solid #e5e7eb;
    color: #374151;
}

.header-cell:last-child {
    border-right: none;
}

.grid-container {
    display: grid;
    grid-template-columns: 40px repeat(5, 1fr);
    position: relative;
}

.time-column {
    border-right: 1px solid #e5e7eb;
    background: #f9fafb;
}

.time-slot {
    height: 120px;
    padding: 8px;
    display: flex;
    align-items: center;
    font-size: 12px;
    color: #6b7280;
    font-weight: 500;
    border-bottom: 1px solid #f3f4f6;
}

.day-column {
    border-right: 1px solid #e5e7eb;
    position: relative;
    background: white;
}

.day-column:last-child {
    border-right: none;
}

<!-- Change .grid-line height and .time-slot height together -->
.grid-line {
    height: 120px;
    border-bottom: 1px solid #f3f4f6;
}

.event {
    position: absolute;
    left: 4px;
    right: 4px;
    border-radius: 4px;
    padding: 8px;
    cursor: pointer;
    font-size: 11px;
    font-weight: normal;
    color: black;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
    z-index: 10;
}

.event:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.event-time {
    font-size: 12px;
    opacity: 0.9;
    margin-bottom: 2px;
}

.event-name {
    font-weight: 400;
    font-size: 16px;
    line-height: 1.2;
}

/* Event type colors */
.general {
    background: linear-gradient(135deg, #e3e3e3, #e3e3e3); /* slate */
}

.keynote {
    background: linear-gradient(135deg, #faf3dd, #faf3dd); /* warm amber/gold */
}

.social {
    background: linear-gradient(135deg, #ffa69e, #ffa69e); /* soft magenta */
}

.invited {
    background: linear-gradient(135deg, #f87171, #ef4444); /* coral red */
}

.talk {
    background: linear-gradient(135deg, #faf3dd, #faf3dd); /* soft blue */
}

.poster {
    background: linear-gradient(135deg, #b8f2e6, #b8f2e6); /* teal green */
}

.workshop {
    background: linear-gradient(135deg, #aed9e0, #aed9e0); /* soft purple */
}

/* Modal styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    border-radius: 12px;
    padding: 24px;
    max-width: 500px;
    width: 90%;
    line-height: 1.5;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
}

.modal-header {
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 16px;
    margin-bottom: 20px;
}

.modal-name {
    font-size: 20px;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 8px;
}

.modal-time {
    color: #6b7280;
    font-size: 14px;
    font-weight: 500;
}

.modal-section {
    margin-bottom: 25px;
}

.modal-section-name {
    font-weight: 600;
    color: #374151;
    margin-bottom: 8px;
    font-size: 1rem;
}

.modal-section-content {
    color: #4b5563;
    font-size: 0.9rem;
    line-height: 1.6;
}

.modal-section-content p {
    margin-top: 10px;
}

.close-button {
    position: absolute;
    top: 6px;
    right: 16px;
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    color: #9ca3af;
    padding: 4px;
    font-weight: bold;
    border-radius: 50%;
}

.close-button:hover {
    color: #374151;
}

.profile-card {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 12px;
  background: #d6e5fba8;
  padding: 10px;
  border-radius: 8px;
}

.profile-img {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
  flex-shrink: 0;          /* don't shrink */
}

/* Hide image completely if not provided */
.profile-img[src=""] {
  display: none;
}

.profile-info {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.profile-name {
  font-weight: bold;
  font-size: 0.9rem;
}

.profile-organization {
  font-size: 0.85rem;
  color: #555;
}

/* Hide org if empty */
.profile-organization:empty {
  display: none;
}


.legend {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
}

.legend h3 {
    font-weight: 600;
    margin-bottom: 12px;
    color: #374151;
}

.legend-items {
    display: flex;
    flex-wrap: wrap;
    gap: 16px;
}

.legend-item {
    display: flex;
    align-items: center;
    gap: 8px;
}

.legend-color {
    width: 16px;
    height: 16px;
    border-radius: 3px;
}

.legend-label {
    font-size: 14px;
    color: #4b5563;
    text-transform: capitalize;
}

.talk-abstract {
    font-size: 0.9rem;
}

.current-time-line {
  position: absolute;
  left: 0;
  right: 0;
  height: 2px;
  background: #1E90FF;
  z-index: 1000; /* on top of events */
}
```

Please note that this is a draft program and is subject to change. 

```{r, results = 'asis', echo = FALSE}
library(htmltools)

header <- function() {
  cells <- list(" ", 
                HTML("Monday<br>Nov. 24th"), 
                HTML("Tuesday<br>Nov. 25th"), 
                HTML("Wednesday<br>Nov. 26th"), 
                HTML("Thursday<br>Nov. 27th"), 
                HTML("Friday<br>Nov. 28th"))
  lapply(cells, \(cell) div(class = "header-cell", cell)) |>
    div(class = "header")
}

time_column <- function() {
  slots <- c("08:30", "09:30", "10:30", "11:30", "12:30", "13:30", "14:30", "15:30", "16:30", "17:30", "18:30")
  lapply(slots, \(slot) div(class = "time-slot", slot)) |>
    div(class = "time-column")
}

event <- function(name, id, type, start_time, end_time, par_id = 1, par_total = 1) {
  if (is.null(par_id)) par_id <- 1
  if (is.null(par_total)) par_total <- 1
  top <- difftime(hms::as_hms(paste0(start_time, ":00")),
                  hms::as_hms("08:00:00"),
                  units = "hours") |>
    as.numeric()
  top <- glue::glue("calc({top}/11*100%)")
  height <- difftime(hms::as_hms(paste0(end_time, ":00")),
                     hms::as_hms(paste0(start_time, ":00")),
                     units = "hours") |>
    as.numeric()
  height <- glue::glue("calc({height}/11*100%)")
  
  left <- glue::glue("calc(1/{par_total}*{par_id - 1}*100%)")
  width <- glue::glue("calc(1/{par_total}*100%)")

  div(class = glue::glue("event {type}"),
      style = glue::glue("top: {top}; height: {height}; width: {width}; left: {left}"),
      onclick = glue::glue("openModal('{id}')"),
      div(class = "event-time",
          glue::glue("{start_time} - {end_time}")),
      div(class = "event-name",
          name))
}

day_column <- function(events) {
  div(class = "day-column",
      lapply(1:10, \(i) div(class = "grid-line")),
      events)
}

legend_item <- function(type, label) {
  div(class = "legend-item",
      div(class = glue::glue("legend-color {type}")),
      div(class = "legend-label", label))
}

legend <- function(types, labels) {
  div(class = "legend",
      h3("Event Types"),
      div(class = "legend-items", 
          lapply(1:length(types), \(i) legend_item(types[i],labels[i]))
          )
      )
}

schedule <- yaml::read_yaml("schedule.yml")
events <- lapply(c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"),
                   function(day) {
                     lapply(schedule[[day]], 
                            \(e) event(e$name, 
                                       e$id, 
                                       e$type, 
                                       e$start, 
                                       e$end, 
                                       e$par_id, 
                                       e$par_total)) |> 
                       day_column()
                     })

div(class = "scroll-wrapper",
    div(class = "container",
    div(class = "timeline-container",
        header(),
        div(class = "grid-container",
            time_column(),
            events)
        ),
    legend(types = c("general", "social", "keynote", "workshop"),
           labels = c("General", "Social", "Talks", "Workshop"))
    )
)

```

```{r, results = "asis", echo = FALSE}
modal <- function() {
  div(id = "modal",
      class = "modal-overlay",
      onclick = "closeModal(event)",
      div(class = "modal-content",
          tags$button(class = "close-button",
                      onclick = "closeModal()",
                      "x"),
          div(class = "modal-header",
              div(class = "modal-name", id = "modal-name"),
              div(class = "modal-time", id = "modal-time")),
          div(id = "modal-body")
          )
      )
}

modal()
```

```{r results = 'asis', echo = FALSE}

# Escape double quotes for JS
escape_js <- function(x) {
  if (is.null(x)) return("")
  x <- stringr::str_replace_all(x, '"', '\\\\"')  # escape double quotes
  stringr::str_replace_all(x, '`', '\\\\`')  # escape back ticks
}

# Flatten and transform
events <- purrr::imap_dfr(schedule, function(day_events, day_name) {
  purrr::map_dfr(day_events, function(e) {
    time_str <- glue::glue("{day_name}, {e$start} - {e$end}")
    
    e$start <- NULL
    e$end <- NULL
    e$time <- time_str
    
    e <- lapply(e, escape_js) |>
      tibble::enframe()
    e$value <- lapply(e$value, \(x) x)
    tidyr::pivot_wider(e, names_from = name, values_from = value)
  })
})

# Construct JS object string
event_lines <- purrr::map_chr(events$id, function(event_id) {
  e <- events[events$id == event_id, ]
  result <- glue::glue("\"{event_id}\": {{\n")
  
  for (i in 1:length(e)) {
    if (length(e[[i]][[1]]) == 0) next
    
    field_name <- names(e)[i]
    field_content <- paste0("[", paste(glue::glue("`{e[[i]][[1]]}`"), collapse = ", "), "]")
    result <- paste0(result, glue::glue("\"{field_name}\": {field_content}, \n"))
  }
  
  result <- paste0(result, "}")
  return(result)
})

# Combine into final JS variable
tags$script(paste0("const eventData = {\n", 
                   paste(event_lines, collapse = ",\n\n"), 
                   "\n};"))
```


```{=html}

<!-- Modify the modal section to fit your need -->
<script>
    function openModal(eventId) {
        const event = eventData[eventId];
        if (!event) return;
    
        document.getElementById('modal-name').textContent = event.name || '';
        document.getElementById('modal-time').textContent = event.time || '';
        
        const modalBody = document.getElementById('modal-body');
        modalBody.innerHTML = ''; // Clear previous content
        
        // Handle speakers
        if (event['speakers']) {
          const speaker_section = document.createElement('div');
          speaker_section.className = 'modal-section';
          speaker_section.innerHTML = `
            <div class="modal-section-name">Speakers</div>
            <div class="modal-section-content">`;
                
          for (let i = 0; i < event['speakers'].length; i++) {
            const speakers_div = `
              <div class="profile-card">
                <img src="${event['speaker_imgs']?.[i] || ''}" alt="Avatar" class="profile-img">
                <div class="profile-info">
                  <div class="profile-name">${event['speakers'][i]}</div>
                  <div class="profile-organization">${event['speaker_orgs']?.[i] || ''}</div>
                </div>
              </div>`;
            speaker_section.innerHTML += speakers_div;
          }
          
          speaker_section.innerHTML += `</div>`;        
          modalBody.appendChild(speaker_section);
        }
    
        // Optional: fields you want to skip or already used at the top
        const excludeKeys = new Set(['name', 'time', 'id', 
                                     'type', 'speakers', 'speaker_imgs', 'speaker_orgs', 
                                     'par_id', 'par_total']);
    
        for (const key in event) {
            if (!event[key] || excludeKeys.has(key) || key.match(/^talk_\d/)) continue;
    
            // Capitalize key for section name
            const sectionTitle = key.charAt(0).toUpperCase() + key.slice(1);
    
            const section = document.createElement('div');
            section.className = 'modal-section';
            
            section.innerHTML = `
                <div class="modal-section-name">${sectionTitle}</div>
                <div class="modal-section-content">${render(event[key][0])}</div>
            `;
            modalBody.appendChild(section);
        }
        
        // Handle multiple talks in one session
        for (const key in event) {
          // detect keys like "talk_1", "talk_2", etc.
          const match = key.match(/^talk_(\d+)$/);
          if (match) {
            const i = match[1]; // the number part
        
            const talkTitle = event[key];
            const talkSpeakers = event[`talk_${i}_speakers`] || [];
            const talkOrgs = event[`talk_${i}_orgs`] || [];
            const talkImgs = event[`talk_${i}_imgs`] || [];
            const talkAbstract = event[`talk_${i}_abstract`]?.[0] || '';
        
            const talk_section = document.createElement('div');
            talk_section.className = 'modal-section';
        
            // Build all content inside a single string
            let contentHTML = '';
        
            // Add speaker cards
            for (let j = 0; j < talkSpeakers.length; j++) {
              contentHTML += `
                <div class="profile-card">
                  <img src="${talkImgs?.[j] || ''}" alt="Avatar" class="profile-img">
                  <div class="profile-info">
                    <div class="profile-name">${talkSpeakers[j]}</div>
                    <div class="profile-organization">${talkOrgs?.[j] || ''}</div>
                  </div>
                </div>`;
            }
        
            // Add abstract after speakers
            if (talkAbstract) {
                contentHTML += `
                  <div class="text-col-abstract callout callout-style-simple callout-note no-icon callout-titled" data-border-left="none">
                    <div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target="#talk-${i}-abstract-body" aria-controls="talk-${i}-abstract-body" aria-expanded="false" aria-label="Toggle callout">
                      <div class="callout-icon-container">
                        <i class="callout-icon no-icon"></i>
                      </div>
                      <div class="callout-title-container flex-fill">
                        Abstract
                      </div>
                      <div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end">
                        <i class="callout-toggle"></i>
                      </div>
                    </div>
                    <div id="talk-${i}-abstract-body" class="callout-collapse collapse">
                      <div class="talk-abstract callout-body-container callout-body">
                        ${render(talkAbstract)}
                      </div>
                    </div>
                  </div>
                `;
              }


        
            // Assign everything into modal-section-content at once
            talk_section.innerHTML = `
              <div class="modal-section-name">${talkTitle}</div>
              <div class="modal-section-content">
                ${contentHTML}
              </div>
            `;
        
            modalBody.appendChild(talk_section);
          }
        }

    
        document.getElementById('modal').style.display = 'flex';
    }


    function closeModal(event) {
        if (!event || event.target.id === 'modal' || event.target.classList.contains('close-button')) {
            document.getElementById('modal').style.display = 'none';
        }
    }

    // Close modal with Escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeModal();
        }
    });
</script>

<script>
    // Simple math renderer
    function renderMathInText(md) {
      // Display math $$...$$
      md = md.replace(/\$\$([\s\S]+?)\$\$/g, (_, expr) =>
        katex.renderToString(expr, { displayMode: true })
      );
    
      // Inline math $...$
      md = md.replace(/\$([^\$]+?)\$/g, (_, expr) =>
        katex.renderToString(expr, { displayMode: false })
      );
    
      return md;
    }
    
    function render(text) {
      return marked.parse(renderMathInText(text));
    }

</script>

<script>
    function updateCurrentTimeLine() {
      const grid = document.querySelector('.grid-container');
      if (!grid) return;
    
      // Remove old lines
      document.querySelectorAll('.current-time-line').forEach(l => l.remove());
    
      // Get current Canberra time
      const now = new Date();
      const canberraTime = new Intl.DateTimeFormat('en-AU', {
        timeZone: 'Australia/Sydney',
        hour: 'numeric',
        minute: 'numeric',
        hour12: false
      }).formatToParts(now);
    
      let hours = 0, minutes = 0;
      canberraTime.forEach(part => {
        if (part.type === 'hour') hours = parseInt(part.value, 10);
        if (part.type === 'minute') minutes = parseInt(part.value, 10);
      });
    
      // Timeline parameters
      const startHour = 8;       // 08:00
      const totalSlots = 11;     // number of divisions
      const endHour = 18.5;      // 18:30
    
      // Fraction along timeline including minutes
      const slotFraction = ((hours + minutes/60) - startHour) / totalSlots;
      const topPercent = slotFraction * 100;
    
      grid.querySelectorAll('.day-column').forEach(col => {
        const line = document.createElement('div');
        line.className = 'current-time-line';
        line.style.top = `calc(${topPercent}%)`;
        line.style.left = '0';
        line.style.right = '0';
        col.appendChild(line);
      });
    }
    
    // Update every minute
    setInterval(updateCurrentTimeLine, 60 * 1000);
    updateCurrentTimeLine();
</script>

```
